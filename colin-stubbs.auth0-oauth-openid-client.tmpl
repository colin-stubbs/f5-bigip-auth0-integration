# Copyright 2018 Colin Stubbs <cstubbs+github-content@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#TMSH-VERSION: 13.1.0

cli admin-partitions {
    update-partition Common
}
sys application template /Common/colin-stubbs.auth0-oauth-openid-client.v0.0.4 {
    actions {
        definition {
            html-help {
            }
            implementation {
                ###################### IAPP PREP ######################

# This variable should not exist if the user is unable to deploy this iApp
# e.g. if bash is disabled on this BIG-IP (because it's in full blown appliance mode)
# e.g. if the current user can't run exec based commands
# You should also use role-acl to deny even getting to this point for user roles that will definitely not work for implementation
if { not [info exists ::INTRODUCTION__INLINE_HELP_CHOICE] } {
  # this is how you forcibly cause the iapp deployment to error
  return -code error "You click finished but the prerequisites for this iApp have not been met"
}

# include cli scripts with functions that we need
tmsh::include "f5.app_utils"
tmsh::include "f5.iapp.1.5.6.cli"
tmsh::include "routedlogic.iapp.0.0.1.cli"

# standard app name setup - can be overwridden in remaining implementation code if desired
set app ${tmsh::app_name}

catch {iapp_template start}

# need to confirm what these actually do
tmsh::log_dest file
tmsh::log_level crit

# example for how to determine a logging level based on the current log level for scriptd (which is what handles iApp deployments)
if { spo } {
  set iAppLogLevel 10
}

# example for how to safely get the partition in a safe way
set partition "/[lindex [split [tmsh::pwd] /] 1]"
set partition_name "[lindex [split [tmsh::pwd] /] 1]"

# example for how to safely work out what the default route domain for our partition is
if { $partition == "/" } {
  puts "Warning: behaviour not well defined when @partition is \"/\""
  set defaultrd 0
} else {
  set obj [tmsh::get_config auth partition $partition_name default-route-domain]
  set defaultrd [tmsh::get_field_value [lindex $obj 0] default-route-domain]
}

#################### END IAPP PREP #####################

###################### PROCEDURES ######################

#################### END PROCEDURES ####################

################## CONFIG TEMPLATES ####################

set TEMPLATE_IRULE_BIGIP_OAUTH_FIXXER_UPPER { }

set TEMPLATE_ACCESS_POLICY { }

################ END CONFIG TEMPLATES ##################

#################### SANE DEFAULTS #####################

lappend defaults [list ::AUTH0_CONFIGURATION__TENANT_PEM "/pem"]
lappend defaults [list ::AUTH0_CONFIGURATION__TENANT_OIDC_CONFIG "/.well-known/openid-configuration"]
lappend defaults [list ::AUTH0_CONFIGURATION__TENANT_JWKS "/.well-known/jwks.json"]
lappend defaults [list ::AUTH0_CONFIGURATION__TENANT_LOGOUT "/v2/logout"]

lappend defaults [list ::AUTH0_CONFIGURATION__CERTIFICATE "/#download#"]
lappend defaults [list ::AUTH0_CONFIGURATION__KID_SOURCE "/#download#"]
lappend defaults [list ::AUTH0_CONFIGURATION__OIDC_SCOPES [list profile]]
lappend defaults [list ::AUTH0_CONFIGURATION__CUSTOM_SCOPE ""]
lappend defaults [list ::AUTH0_CONFIGURATION__AUDIENCE ""]
lappend defaults [list ::AUTH0_CONFIGURATION__CONNECTION ""]

lappend defaults [list ::APM_POLICY_CONFIGURATION__SSO_OBJECT_SELECTION "/#create#"]
lappend defaults [list ::APM_POLICY_CONFIGURATION__LOG_SETTING "/Common/default-log-setting"]
lappend defaults [list ::APM_POLICY_CONFIGURATION__DEBUGGING {0}]

foreach default ${defaults} {
  if { not [info exists [lindex ${default} 0]] } {
    set [lindex ${default} 0] [lindex ${default} 1]
  }
}

set AUTH0_TENANT ${::AUTH0_CONFIGURATION__TENANT_HOSTNAME}
set AUTH0_TENANT_PEM "https://${AUTH0_TENANT}${::AUTH0_CONFIGURATION__TENANT_PEM}"
set AUTH0_OPENID_CONFIGURATION "https://${AUTH0_TENANT}${::AUTH0_CONFIGURATION__TENANT_OIDC_CONFIG}"
set AUTH0_JWKS_URL "https://${AUTH0_TENANT}${::AUTH0_CONFIGURATION__TENANT_JWKS}"
set AUTH0_LOGOUT_URL "https://${AUTH0_TENANT}${::AUTH0_CONFIGURATION__TENANT_LOGOUT}"

set AUTH0_CLIENT_ID ${::AUTH0_CONFIGURATION__CLIENT_ID}
set AUTH0_CLIENT_SECRET ${::AUTH0_CONFIGURATION__CLIENT_SECRET}
set AUTH0_AUDIENCE ${::AUTH0_CONFIGURATION__AUDIENCE}
set AUTH0_CONNECTION ${::AUTH0_CONFIGURATION__CONNECTION}

set AUTH0_SCOPE "${::AUTH0_CONFIGURATION__OIDC_SCOPES} ${::AUTH0_CONFIGURATION__CUSTOM_SCOPE}"

set POLICY_LOGGING ${::APM_POLICY_CONFIGURATION__LOG_SETTING}
set POLICY_DEBUG ${::APM_POLICY_CONFIGURATION__DEBUGGING}

################## END SANE DEFAULTS ###################

###################### DO THINGS #######################

### Create cert from URL to Auth0 tenants /pem endpoint
### This is the quickest and best way to obtain the Auth0 cert used for signing
set AUTH0_CERT {}
if { ${::AUTH0_CONFIGURATION__CERTIFICATE} equals {/#download#} } {
  logDebugTimestamped "Creating sys file ssl-cert from Auth0 tenant X.509 PEM certificate @ ${AUTH0_TENANT_PEM}"

  if { [catch {tmsh::create sys file ssl-cert ${AUTH0_TENANT} source-path ${AUTH0_TENANT_PEM}} message] } {
    return -code error "We were unable to obtain the Auth0 certificate from ${AUTH0_TENANT_PEM}"
  } else {
    set AUTH0_CERT ${AUTH0_TENANT}
  }
} else {
  logDebugTimestamped "Using existing certificate ${::AUTH0_CONFIGURATION__CERTIFICATE}"

  set AUTH0_CERT ${::AUTH0_CONFIGURATION__CERTIFICATE}
}

### we need to have/provide or extract the KID from the JWKS URL manually; because F5 bugs.
set AUTH0_CERT_KID {}
if { ${::AUTH0_CONFIGURATION__KID_SOURCE} != {jwks-url} } {
  set AUTH0_CERT_KID ${::AUTH0_CONFIGURATION__KID}
} else {
  if { [catch { set AUTH0_CERT_KID [exec /usr/bin/curl --connect-timeout 12 -k -s -o - ${AUTH0_JWKS_URL} | jq -r .keys\[0\].kid] } message] } {
    return -code error "We were unable to automatically obtain KID value from ${AUTH0_JWKS_URL}"
  }
}

logDebugTimestamped "Auth0 Tenant Cert KID: ${AUTH0_CERT_KID}"

### determine DNS resolver configuration, create object if necessary
set DNS_RESOLVER_OBJECT {}
if { ${::DNS_RESOLVER_CONFIGURATION__CHOICE} == {/#create#} } {
  set DNS_RESOLVER_OBJECT ${app}_dns_resolver
  logDebugTimestamped "Creating new DNS resolver object ${DNS_RESOLVER_OBJECT}"
  # create new DNS resolver object here
  set RESOLVER_DEFINITION "net dns-resolver ${app}_dns_resolver"

  if { [info exists ::DNS_RESOLVER_CONFIGURATION__FORWARD_SERVERS] } {
    set FORWARD_SERVERS [string map { "{" "" "}" "" "ADDRESS" "" "PORT" "" "\n" "" " " ""} ${::DNS_RESOLVER_CONFIGURATION__FORWARD_SERVERS}]
    if { ${FORWARD_SERVERS} != {} and ${FORWARD_SERVERS} != {53} } {
      append RESOLVER_DEFINITION " { answer-default-zones yes forward-zones replace-all-with { . { nameservers replace-all-with { "
      foreach server ${::DNS_RESOLVER_CONFIGURATION__FORWARD_SERVERS} {
         append RESOLVER_DEFINITION " [string map { "\n" "" "ADDRESS" "" "PORT" ":" " " "" } [lindex ${server} 0]] { }"
      }
      append RESOLVER_DEFINITION "} } } }"
    }
  }

  if { [catch { iapp_conf "create ${RESOLVER_DEFINITION}" }] } {
    return -code error "It does not appear as though your user account is able to create a DNS resolver. Try using an existing DNS resolver if one is available."
  }
} else {
  logDebugTimestamped "Using existing DNS resolver object ${::DNS_RESOLVER_CONFIGURATION__CHOICE}"
  set DNS_RESOLVER_OBJECT ${::DNS_RESOLVER_CONFIGURATION__CHOICE}
}

### create components independent of an APM access policy ###

logDebugTimestamped "Building and merging Auth0 OAuth/OpenID Connect Identity Federation component configuration..."

tmsh::create "ltm rule RULE-QGov-CIDM-Helper { ${TEMPLATE_IRULE_BIGIP_OAUTH_FIXXER_UPPER} }"

tmsh::create "ltm profile server-ssl ${AUTH0_TENANT} { defaults-from serverssl server-name ${AUTH0_TENANT} }"

tmsh::create "apm oauth jwk-config ${AUTH0_TENANT} { alg-type RS256 cert ${AUTH0_CERT} cert-chain ${AUTH0_CERT} key-id ${AUTH0_CERT_KID} }"
tmsh::create "apm oauth jwt-config ${AUTH0_TENANT} { access-token-expires-in 600 allowed-keys replace-all-with { ${AUTH0_TENANT} { } } allowed-signing-algorithms replace-all-with { RS256 HS256 } audience replace-all-with { https://${AUTH0_TENANT}/userinfo } issuer https://${AUTH0_TENANT}/ }"
tmsh::create "apm oauth jwt-provider-list ${AUTH0_TENANT} { access-token-expires-in 600 providers replace-all-with { ${AUTH0_TENANT} { } } }"

tmsh::create "apm aaa oauth-server ${AUTH0_TENANT} { client-id ${AUTH0_CLIENT_ID} client-secret ${AUTH0_CLIENT_SECRET} client-serverssl-profile-name ${AUTH0_TENANT} dns-resolver-name ${DNS_RESOLVER_OBJECT} mode client-rs provider-name ${AUTH0_TENANT} resource-serverssl-profile-name ${AUTH0_TENANT} }"

tmsh::create "apm aaa oauth-provider ${AUTH0_TENANT} { authentication-uri https://${AUTH0_TENANT}/authorize description ${AUTH0_TENANT} manual-jwt-config-name ${AUTH0_TENANT} token-uri https://${AUTH0_TENANT}/oauth/token trusted-ca-bundle ca-bundle.crt type custom use-auto-jwt-config false userinfo-request-uri https://${AUTH0_TENANT}/userinfo openid-cfg-uri ${AUTH0_OPENID_CONFIGURATION} }"

tmsh::create "apm aaa oauth-request Auth0AuthRedirect { method get parameters replace-all-with { client_id { type client-id } redirect_uri { type redirect-uri } response_type { type response-type } scope { type scope } audience { value \"%{session.custom.auth0.audience}\" } connection { value \"%{session.custom.auth0.connection}\" } response_mode { value \"%{session.custom.auth0.response_mode}\" } prompt { value \"%{session.custom.auth0.prompt}\" } } type auth-redirect-request }"
tmsh::create "apm aaa oauth-request Auth0RefreshToken { parameters replace-all-with { client_id { type client-id } client_secret { type client-secret } grant_type { type grant-type } refresh_token { value \"%{sesssion.oauth.client.last.refresh_token}\" } } type token-refresh-request }"
tmsh::create "apm aaa oauth-request Auth0TokenRequest { parameters replace-all-with { client_id { type client-id } client_secret { type client-secret } grant_type { type grant-type } redirect_uri { type redirect-uri } } type token-request }"
tmsh::create "apm aaa oauth-request Auth0UserInfoRequest { method get parameters replace-all-with { access_token { type access-token } } type openid-userinfo-request }"
tmsh::create "apm aaa oauth-request Auth0ValidationScopeUserInfoRequest { parameters replace-all-with { access_token { type access-token } } type validation-scopes-request }"

logDebugTimestamped "Configuration of objects appears to have been successful"

### create APM access policy if requested; and SSO object if requested ###
if { ${::APM_POLICY_CONFIGURATION__ACTION} equals {create} } {
  # work out if the policy wants SSO and if create an oauth bearer profile if requested
  if { ${::APM_POLICY_CONFIGURATION__SSO_OBJECT_SELECTION} == {/#create#} } {
    iapp_conf "create apm sso oauth-bearer ${AUTH0_TENANT} { headers none jwt-provider-list ${AUTH0_TENANT} oauth-server ${AUTH0_TENANT} }"
    set POLICY_SSO "${partition}/${app}.app/${AUTH0_TENANT}"
  } else {
    set POLICY_SSO ${::APM_POLICY_CONFIGURATION__SSO_OBJECT_SELECTION}
  }

  set POLICY_COOKIE_DOMAIN {none}
  if { [info exists ::APM_POLICY_CONFIGURATION__COOKIE_DOMAIN] } {
    if { ${::APM_POLICY_CONFIGURATION__COOKIE_DOMAIN} != {} } {
      set POLICY_COOKIE_DOMAIN ${::APM_POLICY_CONFIGURATION__COOKIE_DOMAIN}
    }
  }

  set POLICY_NAME ${app}

  # simplified way to manage mapping variable names
  set mapping [list POLICY_NAME]
  lappend mapping AUTH0_TENANT
  lappend mapping AUTH0_CLIENT_ID
  lappend mapping AUTH0_CLIENT_SECRET
  lappend mapping AUTH0_LOGOUT_URL
  lappend mapping AUTH0_OPENID_CONFIGURATION
  lappend mapping AUTH0_JWKS_URL
  lappend mapping AUTH0_SCOPE
  lappend mapping AUTH0_AUDIENCE
  lappend mapping AUTH0_CONNECTION

  lappend mapping POLICY_LOGGING
  lappend mapping POLICY_COOKIE_DOMAIN
  lappend mapping POLICY_SSO
  lappend mapping POLICY_DEBUG

  set mapping_content [list]
  foreach variable_name ${mapping} {
    if { [info exists ${variable_name}] } {
      lappend mapping_content "__${variable_name}__"
      lappend mapping_content "[set ${variable_name}]"
    }
  }

  lappend mapping_content "__APP_PATH__"
  lappend mapping_content "${partition}/${app}.app"

  if { [canExecShell] } {
    # do the map; and split the config template into individual apm statements to use iapp_conf against
    # mergeToRunningConfig ${app} [string map ${mapping_content} ${TEMPLATE_ACCESS_POLICY}]

    # this function uses exec's and file writes which won't work if the user can't execute anything
    # applyAccessPolicy ${POLICY_NAME}
  }
}

#################### END DO THINGS #####################

catch {iapp_template stop}
            }
            macro {
            }
            presentation {
                include "/Common/f5.apl_common"

### CHOICES ###

define choice BOOLEAN_DEFAULT_TRUE display "xxlarge" default "1" {
  "True" => "1",
  "False" => "0"
}

define choice BOOLEAN_DEFAULT_FALSE display "xxlarge" default "0" {
  "True" => "1",
  "False" => "0"
}

define choice TRUE_FALSE_DEFAULT_TRUE display "xxlarge" default "true" {
  "True" => "true",
  "False" => "false"
}

define choice TRUE_FALSE_DEFAULT_FALSE display "xxlarge" default "false" {
  "True" => "true",
  "False" => "false"
}

define choice YES_NO_DEFAULT_YES display "xxlarge" default "yes" {
  "Yes" => "yes",
  "No" => "no"
}

define choice YES_NO_DEFAULT_NO display "xxlarge" default "no" {
  "Yes" => "yes",
  "No" => "no"
}

define choice INLINE_HELP display "xxlarge" default "hide" {
  "No, do not show inline help" => "hide",
  "Yes, show inline help" => "max"
}

define choice IAPP_MODES display "xxlarge" default "basic" {
  "Basic - Use recommended settings" => "basic",
  "Advanced - Configure all options" => "advanced"
}

define choice KID_SOURCES default "jwks-url" display "xxlarge" {
  "Download & extract from JWKS URL" => "jwks-url",
  "Provide manually within this iApp" => "provide"
}

define choice APM_POLICY_ACTIONS default "create" display "xxlarge" {
  "Create an APM access policy" => "create",
  "No APM access policy required" => "ignore"
}

define multichoice OIDC_STANDARD_SCOPE_LIST display "xxlarge" default { "profile" } {
  "sub" => "sub",
  "name" => "name",
  "given_name" => "given_name",
  "family_name" => "family_name",
  "middle_name" => "middle_name",
  "nickname" => "nickname",
  "preferred_username" => "preferred_username",
  "profile" => "profile",
  "picture" => "picture",
  "website" => "website",
  "email" => "email",
  "email_verified" => "email_verified",
  "gender" => "gender",
  "birthdate" => "birthdate",
  "zoneinfo" => "zoneinfo",
  "locale" => "locale",
  "phone_number" => "phone_number",
  "phone_number_verified" => "phone_number_verified",
  "address" => "address",
  "updated_at" => "updated_at",
  "offline_access" => "offline_access"
}

### SECTIONS ###

section INTRODUCTION {

  optional ( "HIDE" == "THIS" ) {
    choice LTM_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned ltm] ? "yes":"no" }}
    choice AVR_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned avr] ? "yes":"no" }}
    choice AFM_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned afm] ? "yes":"no" }}
    choice ASM_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned asm] ? "yes":"no" }}
    choice APM_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned apm] ? "yes":"no" }}
    choice GTM_PROVISIONED tcl { expr { [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_provisioned gtm] ? "yes":"no" }}
    choice BASH_DISABLED   tcl { expr { [expr { [string first true [tmsh::list sys db systemauth.disablebash value]] != -1}] ? "yes" : "no" }}
    choice CAN_EXEC        tcl { expr { [catch { exec /bin/true }] ? "no":"yes" }}
  }

  optional ( BASH_DISABLED == "yes" ) {
    message NON_BASH_WARNING "You have opened this iApp while Bash is disabled. You can not run this iApp without Bash enabled."
  }

  optional ( CAN_EXEC == "no" ) {
    message NO_EXEC_WARNING "You have opened this iApp as a user who cannot execute shell commands. This iApp requires the user deploying it to have an account that can do so."
  }

  optional ( BASH_DISABLED == "no" && CAN_EXEC == "yes" ) {
    optional ( "HIDE" == "THIS" ) {
      choice ALLOW_DEPLOY { "yes" }
    }

    message DESCRIPTION "Use this template to configure BIG-IP with APM authentication using the Auth0 platform."
    message PREREQS_1 "Before using this iApp you must ensure that the following prerequisites are met:"
    message PREREQS_2 "1. You deploy the iApp as a BIG-IP Administrator. Other roles, such as Manager, will lack sufficient permissions and deployment will fail."
    message PREREQS_3 "2. This BIG-IP system, and any HA partners, have unrestricted outbound HTTPS access to the public Internet from their self IP's and floating self IP's. This is necessary when BIG-IP APM functions as an OAuth client against Auth0; which operates on Amazon Web Services (AWS) based IP's that will change periodically over time."
    message PREREQS_4 "3. This BIG-IP system, and any HA partners, have access to appropriate internal DNS servers, or unrestricted outbound DNS access, using UDP/53 and TCP/53. This is necessary for the DNS Resolver object to function; which supports outbound HTTPS connectivity as an OAuth client."

    INLINE_HELP INLINE_HELP_CHOICE
    optional ( INLINE_HELP_CHOICE == "max" ) {
      message INLINE_HELP_CHOICE_HELP "Inline help is available to provide contextual descriptions to aid in the completion of this configuration. Select to show or hide the inline help in this template. Important notes and warnings are always visible, no matter which selection you make here."
    }

    IAPP_MODES IAPP_MODE
    optional ( INLINE_HELP_CHOICE == "max" ) {
      message IAPP_MODE_HELP "This template supports basic and advanced configurations modes. Basic mode exposes the most commonly used settings, and automatically configures the rest of the options based on F5's recommended settings. Advanced mode allows you to review and change all settings. If you are unsure, select Basic."
    }
  }
}

optional ( INTRODUCTION.BASH_DISABLED == "no" && INTRODUCTION.CAN_EXEC == "yes" ) {
  section AUTH0_CONFIGURATION {
    message HELP_INTRO "The following parameters are available in the Auth0 Dashboard for your instance. You will need to create an application to represent this F5 BIG-IP and to obtain the client ID and secret. The application type can be any, but is probably best defined as a 'Regular Web Application'."

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message TENANT_HOSTNAME_HELP "The Auth0 tenant hostname is by default something like your-tenant.auth0.com or your-tenant.region.auth0.com. However if you're integrating against an Auth0 tenant with a custom hostname this may be something else entirely. You may be able to use either; depending on how the tenant has been configured."
    }
    string TENANT_HOSTNAME display "xxlarge" validator "FQDN" required

    message TENANT_LOCATION_LIST_START "The following standard tenant URI's will be used with the tenant hostname. If you wish to utilise custom URL's enter them in full here, e.g. https://your.custom.location/jwks.json"
    string TENANT_PEM display "xxlarge" default "/pem"
    string TENANT_OIDC_CONFIG display "xxlarge" default "/.well-known/openid-configuration"
    string TENANT_JWKS display "xxlarge" default "/.well-known/jwks.json"
    string TENANT_LOGOUT display "xxlarge" default "/v2/logout"
    message TENANT_LOCATION_LIST_END ""

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message CLIENT_ID_HELP "Each application within Auth0 has a client ID and client secret. This BIG-IP integration is, from Auth0's perspective, an 'application'. You can find the client ID within the Auth0 tenant management dashboard."
    }
    string CLIENT_ID display "xxlarge" required

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message CLIENT_SECRET_HELP "Each application within Auth0 has a client ID and client secret. This BIG-IP integration is, from Auth0's perspective, an 'application'. You can find the client secret within the Auth0 tenant management dashboard."
    }
    password CLIENT_SECRET display "xxlarge" required

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message CERTIFICATE_HELP "The X.509 certificate used to digitally sign some tokens and messages must exist on the BIG-IP. If you've already downloaded and installed it select the certificate from the list. If you have not obtained the certificate yet this iApp will do it for your from the standard Auth0 PEM URI based on your tenant ID, e.g. https://tenantid.region.auth0.com/pem"
    }
    choice CERTIFICATE default "/#download#" display "xxlarge" tcl {
      set ::choices "Download the certificate from Auth0 tenant\t/#download#\n"
      append ::choices [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
      return [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_safe_display ::choices]
    }

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message KID_SOURCE_HELP "APM is supposed to be able to automatically consume OpenID Configuration and JWKS JSON content, however it currently has a bug whereby it cannot process the Base64 (minus hash padding) KID correctly. This configuration needs to know the Key ID (KID) that will be used to sign tokens issued by Auth0. The iApp can obtain this automatically for you if this F5 has HTTPS based access to the public Internet/the Auth0 tenant host. If not you may enter it manually after obtaining it from within https://your-tenant.auth0.com/.well-known/jwks.json"
    }
    KID_SOURCES KID_SOURCE

    optional ( KID_SOURCE != "jwks-url" ) {
      optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
        message KID_HELP "Enter the KID manually below. You can obtain this from within https://your-tenant.auth0.com/.well-known/jwks.json"
      }
      string KID display "xxlarge" required
    }

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message OIDC_SCOPES_HELP "Select the standard OpenID Connect scopes that you'd like to request from the list below."
    }
    OIDC_STANDARD_SCOPE_LIST OIDC_SCOPES

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message CUSTOM_SCOPE_HELP "Enter any custom scopes you'd like to request below."
    }
    string CUSTOM_SCOPE display "xxlarge" default ""

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message AUDIENCE_HELP "To obtain a JSON Web Token (JWT) you will need to provide an audience value. If no audience is specified an access token will be received that is usable against Auth0 API's; but it will NOT be a JWT and it will not have a JSON Web Signature (JWS)."
    }
    string AUDIENCE display "xxlarge" required

    optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
      message CONNECTION_HELP "If your authentication integration requires use of an Auth0 connection, e.g. authentication is completed via a third-party service, specific the connection name here."
    }
    string CONNECTION display "xxlarge"
    }

    section DNS_RESOLVER_CONFIGURATION {
    message HELP_INTRO "BIG-IP APM as an OAuth/OpenID Connect client will need to connect to Auth0 for a number of requests, to do this it must utilise a DNS resolver configuration object. If you havn't configured a DNS resolver object yet this iApp can create one for you, if you already have one due to special requirements, select that instead."

    choice CHOICE display "xxlarge" default "/#create#" tcl {
      set ::choices "Create a DNS Resolver configuration\t/#create#\n[tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_items -norecursive net dns-resolver]"
      return [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_safe_display ::choices]
    }

    optional ( CHOICE == "/#create#" ) {
      table FORWARD_SERVERS {
        string ADDRESS validator "IpAddress"
        string PORT default "53" validator "Number"
      }
    }
  }

  section APM_POLICY_CONFIGURATION {
    optional ( INTRODUCTION.CAN_EXEC == "no" ) {
      message CANNOT_CONFIGURE_NO_EXEC "APM access policy creation will not be possible as your user account is unable to execute shell commands."
    }
    optional ( INTRODUCTION.BASH_DISABLED == "yes" ) {
      message CANNOT_CONFIGURE_BASH_DISABLED "This F5 BIG-IP appears to be operating in appliance mode. APM access policy creation will not be possible due to current iApp behaviour."
    }
    optional ( INTRODUCTION.CAN_EXEC == "yes" && INTRODUCTION.BASH_DISABLED == "no" ) {
      optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
        message ACTION_HELP "If you choose to not have this iApp create an APM access policy for you, it will still create all of the necessary APM OAuth configuration objects necessary to create a policy that utilises them. However, if you allow this iApp to create a policy you still have a choose to use it, and may instead simply copy or export the policy to use as a reference policy to manually build a new policy from."
      }
      APM_POLICY_ACTIONS ACTION
      optional ( ACTION == "create" ) {
        optional ( INTRODUCTION.IAPP_MODE != "basic" ) {
          optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
            message COOKIE_DOMAIN_HELP "If you intend to use this access policy as part of a multi-virtual server deployment you may need to define a domain for which the APM session cookie should be valid, e.g. app.your.fqdn. While APM supports multi-domain cookies this iApp does not currently support this feature. If you required this use the iApp to build a policy, clone it, and make the modifications you require."
          }
          string COOKIE_DOMAIN display "xxlarge" validator "FQDN"

          optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
            message SSO_HELP "You may select an existing Single Sign-On (SSO) method here; or this iApp can create an OAuth Bearer SSO configuration for you. If you need something else please create a custom SSO configuration and re-run this iApp to select it."
          }
          choice SSO_OBJECT_SELECTION display "xxlarge" default "/#create#" tcl {
            set ::choices "Create an OAuth Bearer SSO configuration\t/#create#\nNo SSO by policy required\tnone\n[tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_items apm sso]"
            return [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_safe_display ::choices]
          }

          choice LOG_SETTING display "xxlarge" default "/Common/default-log-setting" tcl {
            set ::choices "[tmsh::run_proc f5.iapp.1.5.6.cli:iapp_get_items apm log-setting]"
            return [tmsh::run_proc f5.iapp.1.5.6.cli:iapp_safe_display ::choices]
          }
        }
      }
      optional ( INTRODUCTION.IAPP_MODE != "basic" ) {
        optional ( INTRODUCTION.INLINE_HELP_CHOICE == "max" ) {
          message DEBUGGING_HELP "If you enable debugging the access policy will provide message box based interrupts within the policy flow so you can understand activity and values at that point within the policy flow."
        }
        BOOLEAN_DEFAULT_FALSE DEBUGGING
      }
    }
  }
  section VS_CONFIGURATION {
  message HELP_INTRO "This iApp does not yet provide the ability to create a Virtual Server. To create a virtual server to attach the APM policy to please consider using the official F5 HTTP Applications iApp available here: https://f5.com/solutions/deployment-guides"
  }
}

### TEXT DISPLAY ###
text {
  INTRODUCTION "Welcome to the Auth0 OAuth/OpenID Connect Authentication Integration iApp"
  INTRODUCTION.DESCRIPTION "Introduction"
  INTRODUCTION.PREREQS_1 ""
  INTRODUCTION.PREREQS_2 ""
  INTRODUCTION.PREREQS_3 ""
  INTRODUCTION.PREREQS_4 ""
  INTRODUCTION.INLINE_HELP_CHOICE "Do you want to see inline help?"
  INTRODUCTION.IAPP_MODE "Which configuration mode do you want to use?"
  INTRODUCTION.INLINE_HELP_CHOICE_HELP ""
  INTRODUCTION.IAPP_MODE_HELP ""

  AUTH0_CONFIGURATION "Auth0 Integration"
  AUTH0_CONFIGURATION.HELP_INTRO ""
  AUTH0_CONFIGURATION.TENANT_HOSTNAME_HELP ""
  AUTH0_CONFIGURATION.TENANT_HOSTNAME "What's your Auth0 tenant hostname?"
  AUTH0_CONFIGURATION.TENANT_LOCATION_LIST_START ""
  AUTH0_CONFIGURATION.TENANT_PEM "Signing Certificate PEM"
  AUTH0_CONFIGURATION.TENANT_OIDC_CONFIG "OpenID Connect Configuration"
  AUTH0_CONFIGURATION.TENANT_JWKS "JWKS"
  AUTH0_CONFIGURATION.TENANT_LOGOUT "Logout URI"
  AUTH0_CONFIGURATION.TENANT_LOCATION_LIST_END ""
  AUTH0_CONFIGURATION.CLIENT_ID_HELP ""
  AUTH0_CONFIGURATION.CLIENT_ID "What's your Auth0 Application Client ID?"
  AUTH0_CONFIGURATION.CLIENT_SECRET_HELP ""
  AUTH0_CONFIGURATION.CLIENT_SECRET "What's your Auth0 Application Client Secret?"
  AUTH0_CONFIGURATION.CERTIFICATE_HELP ""
  AUTH0_CONFIGURATION.CERTIFICATE "What source should we use for the Auth0 tenant certificate"
  AUTH0_CONFIGURATION.KID_SOURCE_HELP ""
  AUTH0_CONFIGURATION.KID_SOURCE "How should the iApp obtain the tenant Key ID (KID)?"
  AUTH0_CONFIGURATION.KID_HELP ""
  AUTH0_CONFIGURATION.KID "What KID value does this tenant use?"
  AUTH0_CONFIGURATION.OIDC_SCOPES_HELP ""
  AUTH0_CONFIGURATION.OIDC_SCOPES "Which OpenID Connect scopes should be requested?"
  AUTH0_CONFIGURATION.CUSTOM_SCOPE_HELP ""
  AUTH0_CONFIGURATION.CUSTOM_SCOPE "OAuth Token Scope be:"
  AUTH0_CONFIGURATION.AUDIENCE_HELP ""
  AUTH0_CONFIGURATION.AUDIENCE "OAuth Token Audience will be:"
  AUTH0_CONFIGURATION.CONNECTION_HELP ""
  AUTH0_CONFIGURATION.CONNECTION "Auth0 Connection will be:"

  DNS_RESOLVER_CONFIGURATION "DNS Resolver Configuration"
  DNS_RESOLVER_CONFIGURATION.HELP_INTRO ""
  DNS_RESOLVER_CONFIGURATION.CHOICE "DNS Resolver"
  DNS_RESOLVER_CONFIGURATION.FORWARD_SERVERS "What servers should the DNS resolver use?"
  DNS_RESOLVER_CONFIGURATION.FORWARD_SERVERS.ADDRESS "IP Address"
  DNS_RESOLVER_CONFIGURATION.FORWARD_SERVERS.PORT "Port"

  APM_POLICY_CONFIGURATION "APM Policy Configuration"
  APM_POLICY_CONFIGURATION.CANNOT_CONFIGURE_NO_EXEC ""
  APM_POLICY_CONFIGURATION.CANNOT_CONFIGURE_BASH_DISABLED ""
  APM_POLICY_CONFIGURATION.ACTION_HELP ""
  APM_POLICY_CONFIGURATION.ACTION "Should this iApp create an APM access policy?"
  APM_POLICY_CONFIGURATION.COOKIE_DOMAIN_HELP ""
  APM_POLICY_CONFIGURATION.COOKIE_DOMAIN "What domain should the session cookie be valid for?"
  APM_POLICY_CONFIGURATION.SSO_HELP ""
  APM_POLICY_CONFIGURATION.SSO_OBJECT_SELECTION "How should the access policy perform Single Sign-On?"
  APM_POLICY_CONFIGURATION.LOG_SETTING "Which logging profile should be utilised?"
  APM_POLICY_CONFIGURATION.DEBUGGING_HELP ""
  APM_POLICY_CONFIGURATION.DEBUGGING "Should debugging be enabled within the policy?"

  VS_CONFIGURATION "Virtual Server Setup"
  VS_CONFIGURATION.HELP_INTRO ""
}
            }
            role-acl { admin }
            run-as none
        }
    }
    description "BIG-IP integration iApp for Auth0/OpenID Connect"
    ignore-verification false
    requires-bigip-version-max none
    requires-bigip-version-min 13.1.0
    requires-modules { apm }
    signing-key none
    tmpl-checksum none
    tmpl-signature none
}
